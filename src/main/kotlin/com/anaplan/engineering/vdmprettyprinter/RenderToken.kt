/*
 * #%~
 * VDM Pretty Printer
 * %%
 * Copyright (C) 2018 Anaplan Inc
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #~%
 */
package com.anaplan.engineering.vdmprettyprinter

enum class RenderToken(private val explicitRender: String? = null) {
    emptyTuple("()"),
    emptySet("{}"),
    partialFunction("->"),
    totalFunction("+>"),
    multiplication("*"),
    operation("==>"),
    maplet("|->"),
    bullet("&"),
    plus("+"),
    range("..."),
    minus("-"),
    record("::"),
    power("**"),
    powerset("power"),
    hash("#"),
    colon(":"),
    fnEquals("=="),
    equals("="),
    quote("'"),
    abstraction(":-"),
    doubleQuote("\""),
    backTick("`"),
    relationalOverride("++"),
    floorLeft("floor "),
    floorRight(""),
    ceilingLeft("ceiling "),
    ceilingRight(""),
    inToken("in"),
    inSet("in set"),
    inSeq("in seq"),
    ifToken("if"),
    forToken("for"),
    whileToken("while"),
    doToken("do"),
    elseToken("else"),
    isNotYetSpecified("is not yet specified"),
    returnToken("return"),
    setLeft("set of "),
    setRight(""),
    set1Left("set1 of "),
    set1Right(""),
    seqLeft("seq of "),
    seqRight(""),
    inverseLeft("inverse "),
    inverseRight(""),
    seq1Left("seq1 of "),
    seq1Right(""),
    trueToken("true"),
    falseToken("false"),
    toToken("to"),
    classToken("class"),
    mapTo("to"),
    inmapTo("to"),
    newLine("\n"),
    space(" "),
    pipe("|"),
    lparens("("),
    rparens(")"),
    lbrace("{"),
    rbrace("}"),
    lsquare("["),
    rsquare("]"),
    comma(","),
    semiColon(";"),
    lquote("<"),
    rquote(">"),
    lessThan("<"),
    greaterThan(">"),
    lessThanEq("<="),
    greaterThanEq(">="),
    dot("."),
    concat("^"),
    implies("=>"),
    assign(":="),
    paramType("@"),
    anyType("?"),
    classInvariant(""),
    isOfClass("isofclass"),
    isOfBaseClass("isofbaseclass"),
    isSubclassOf("is subclass of"),
    withToken("with"),
    is_(),
    real(),
    time(),
    periodic(),
    cycles(),
    trap(),
    duration(),
    system(),
    subset(),
    psubset(),
    self(),
    exit(),
    atomic(),
    threadid(),
    measure(),
    by(),
    new(),
    mu(),
    skip(),
    map(),
    inmap(),
    be(),
    pure(),
    st(),
    forall(),
    inds(),
    dcl(),
    error(),
    exists(),
    exists1(),
    bool(),
    absLeft("abs "),
    absRight(""),
    rng(),
    dom(),
    instanceVariables("instance variables"),
    others(),
    static(),
    publicToken("public"),
    protectedToken("protected"),
    async(),
    sync(),
    mutex(),
    per(),
    thread(),
    lambda(),
    start(),
    isSubclassResponsibility("is subclass responsibility"),
    dunion(),
    dinter(),
    hd(),
    tl(),
    reverse(),
    card(),
    cases(),
    iota(),
    union(),
    errs(),
    ext(),
    inter(),
    merge(),
    rat(),
    munion(),
    elems(),
    len(),
    nil(),
    nat(),
    and(),
    nat1(),
    int(),
    not(),
    pre(),
    post(),
    conc(),
    inv(),
    eq(),
    ord(),
    then(),
    elseif(),
    let(),
    def(),
    end(),
    mk_(),
    module(),
    initToken("init"),
    definitions(),
    traces(),
    imports(),
    exports(),
    from(),
    all(),
    renamed(),
    struct(),
    functions(),
    operations(),
    types(),
    values(),
    importFunctions("functions"),
    importOperations("operations"),
    importTypes("types"),
    importValues("values"),
    token(),
    state(),
    of(),
    undefined(),
    char();

    val defaultRender: String by lazy {
        if (explicitRender == null) {
            this.name
        } else {
            explicitRender
        }
    }

    companion object {
        private val stringLookup: Map<String, RenderToken> by lazy {
            RenderToken.values().filter { it.defaultRender != "" }.map { it.defaultRender to it }.toMap()
        }

        fun lookup(string: String) = stringLookup.get(string)
    }

}